{"version":3,"sources":["../build/app.es6.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["let game = {};\n;let angleToDirection = ({angle, distance}) => {\n  let direction = ((angle/360) * Math.PI) - Math.PI/2;\n  // console.log(direction);\n  return {\n    x: (distance * Math.cos(direction)),\n    y: (distance * Math.sin(direction))\n  };\n};\n\nlet moveDirection = (start, movement) => {\n  return {\n    x: start.x + movement.x,\n    y: start.y + movement.y\n  };\n};\n\n\nclass Creature {\n  constructor({\n    position={x:0, y:0},\n    color={r:255, g:0, b:0},\n    length=10,\n    direction=90,\n    autonomous=false,\n    thinkInterval=100\n    })\n  {\n\n    this.currentPosition = position;\n    this.segmentPositions = [position];\n\n    this.segmentDistance = 5;\n\n    this.color = color;\n\n    this.stepDistance = 1;\n    this.direction = angleToDirection({angle: direction, distance: this.stepDistance});\n\n    this.length = length;\n\n    if(autonomous) {\n      this.autonomous = true;\n      this.brain = {};\n      this.brain.thinkInterval = thinkInterval;\n      this.brain.thinkStep = 0;\n    }\n\n    this.segments = this.generateInitialSegments();\n\n  }\n\n  move() {\n    if(this.autonomous) {\n      this.think();\n    }\n    this.segments.forEach((segment) => {\n      segment.update();\n    });\n  }\n\n  updateDirection(angle) {\n    let newDirection = angleToDirection({angle: angle, distance: this.stepDistance});\n    this.direction = newDirection;\n  }\n\n  think() {\n    if(this.brain.thinkStep > this.brain.thinkInterval) {\n      this.brain.thinkStep = 0;\n      let newDirection = parseInt((Math.random() * 720)-360);\n      console.log(\"i decided to go\", newDirection);\n      this.updateDirection(newDirection);\n      console.log(\"new direction is\", this.direction);\n    } else {\n      this.brain.thinkStep++;\n    }\n\n  }\n\n  radius() {\n    return 5+(this.length/20);\n  }\n\n  sprites() {\n    return this.segments.map((segment) => {\n      return segment.sprite;\n    });\n  }\n\n  newRootSegment() {\n    let creature = this;\n    return {\n      position: creature.currentPosition,\n      direction: creature.direction,\n      update: function() {},\n      sprite: new Sprite({\n        type: 'circle',\n        radius: this.radius(),\n        position: this.position,\n        color: this.color\n      })\n    };\n  }\n\n  newChildSegment({parent}) {\n    let creature = this;\n    return {\n      parent: parent,\n      direction: parent.direction,\n      position: {},\n      update: function() {\n        this.updatePosition();\n      },\n      updatePosition: function() {\n        this.position = moveDirection(parent.position, this.direction);\n      },\n      sprite: new Sprite({\n        type: 'circle',\n        radius: creature.radius(),\n        position: this.position,\n        color: creature.color,\n      })\n    };\n  }\n\n  generateInitialSegments() {\n    let creature = this;\n    let initialAngle = 90;\n\n    let rootSegment = this.newRootSegment();\n    let segments = [rootSegment];\n\n    for(let idx = 1; idx < this.length; i++) {\n      let childSegment = this.newChildSegment({\n        parent: segments[segments.length-1]\n      });\n      childSegment.update();\n      segments.push(childSegment);\n    }\n\n    return segments;\n  }\n\n\n}\n;let engineService = () => {\n  let engine = {};\n\n  engine.initialize = ({canvas}) => {\n    engine.canvas = canvas;\n  };\n\n  engine.logCanvas = () => { console.log(engine.canvas); };\n\n  let renderService = () => {\n    let render = {};\n\n\n\n    let addSprite = (sprite, spriteMap) => {\n      if(!spriteMap.has(sprite.color)){\n        spriteMap.set(sprite.color, []);\n      }\n      spriteMap.get(sprite.color).push(sprite);\n    };\n\n    let addSprites = (sprites, spriteMap) => {\n      sprites.forEach((sprite)=>{\n        addSprite(sprite, spriteMap);\n      });\n    };\n\n\n\n    let entities = {\n      all: []\n    };\n\n    entities.sprites = () => {\n      let spritesMap = new Map();\n      entities.all.forEach((entity) => {\n        addSprites(entity.sprites(), spritesMap);\n      });\n      // console.log(spritesMap.values());\n      return spritesMap;\n    };\n\n    entities.update = () => {\n      entities.all.forEach((entity) => {\n        entity.move();\n      });\n    };\n\n    render.addEntity = (entity) => { entities.all.push(entity); };\n\n\n\n\n    render.update = () => {\n      entities.update();\n      let entitySpritesMap = entities.sprites();\n\n      let ctx = engine.canvas.getContext('2d');\n\n      ctx.clearRect(0, 0, engine.canvas.width, engine.canvas.height);\n\n      let drawColorGroup = (sprites, color) => {\n        sprites.reverse();\n        sprites.forEach( (sprite) => {\n          ctx.beginPath();\n          sprite.draw(ctx);\n          ctx.closePath();\n        });\n\n      };\n      entitySpritesMap.forEach(drawColorGroup);\n    };\n\n\n\n    return render;\n  };\n\n  engine.render = renderService();\n\n  return engine;\n};\n\ngame.engine = engineService();\n;class Sprite {\n  constructor({type, position, color={r: 255, g: 0, b: 0}, opacity=1, radius=40}) {\n    this.type = type;\n    this.position = position;\n    this.color = color;\n    this.opacity = opacity;\n    this.radius = radius;\n  }\n\n  rgbaValue() {\n    return `rgba(${this.color.r}, ${this.color.g}, ${this.color.b},  ${this.opacity})`;\n  }\n\n  drawCircle(ctx) {\n    ctx.fillStyle = this.rgbaValue();\n    ctx.arc(this.position.x, this.position.y, this.radius, 0, 2*Math.PI);\n    ctx.fill();\n  }\n\n  draw(ctx) {\n    switch(this.type) {\n      case 'circle':\n        this.drawCircle(ctx);\n        break;\n      case 'circle-gradient':\n        this.drawCircleGradient(ctx);\n        break;\n    }\n  }\n}\n;var canvas = document.getElementById(\"slitherbots-canvas\");\n\nconsole.log(game);\n\ngame.engine.initialize({canvas: canvas});\ngame.engine.logCanvas();\n\nlet canvasCenter = () => {\n  return {x: canvas.width/2, y: canvas.height/2};\n};\n\nlet slitherbot = new Creature({\n  position: canvasCenter(),\n  length: 50,\n  direction: 1,\n  autonomous: true,\n  thinkInterval: 10\n});\n\nlet slitherbot2 = new Creature({\n  position: canvasCenter(),\n  length: 10,\n  direction: 1,\n  color: {r: 255, g:0, b:255}\n});\n\ngame.engine.render.addEntity(slitherbot);\ngame.engine.render.addEntity(slitherbot2);\n\n\nlet count = 0;\nlet direction = 1;\n\nwindow.setInterval( () => {\n  if(count%10===0) {\n    direction+=20;\n    slitherbot2.updateDirection(direction);\n   }\n  count++;\n  window.requestAnimationFrame(game.engine.render.update);\n}, 17);\n\n/*\nvar ctx = c.getContext(\"2d\");\nctx.fillStyle = \"#FF0000\";\nctx.fillRect(0,0,150,75);\n*/\n"]}