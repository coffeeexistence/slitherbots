{"version":3,"sources":["../build/app.es6.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["let game = {};\n;function childSegmentFactory({parent, colorModifier = 0, creature}) {\n    let startPosition = {x: parent.position.x, y: parent.position.y};\n    let segment = segmentFactory({startPosition: startPosition, creature: creature});\n\n    segment.type ='child';\n    segment.parent = parent;\n    segment.checkForMoves = function() {\n      segment.parent.childPendingMoves.forEach(function(move, index) {\n        if(move.distance >= creature.segmentDistance) {\n          segment.changeDirection(move.direction);\n\n          segment.parent.childPendingMoves.splice(index, 1);\n        } else {\n          move.distance++;\n        }\n      });\n    };\n    segment.direction = {x: 0,  y: 0};\n\n    segment.update = function() {\n      this.checkForMoves();\n      this.updatePosition();\n    };\n\n  parent.child = segment;\n\n  return segment;\n}\n;function angleToDirection ({angle, distance}) {\n  let direction = ((angle/360) * Math.PI) - Math.PI/2;\n  // console.log(direction);\n  return {\n    x: (distance * Math.cos(direction)),\n    y: (distance * Math.sin(direction))\n  };\n}\n\nfunction moveDirection (start, movement) {\n  return {\n    x: start.x + movement.x,\n    y: start.y + movement.y\n  };\n}\n\nfunction invertDirection (direction) {\n  return {\n    x: direction.x * -1,\n    y: direction.y * -1\n  };\n}\n\n\nclass Creature {\n  constructor({\n    position={x:0, y:0},\n    color={r:255, g:0, b:0},\n    length=10,\n    direction=0,\n    autonomous=false,\n    thinkInterval=100\n    })\n  {\n\n    this.currentPosition = position;\n    this.segmentPositions = [position];\n\n    this.segmentDistance = 9;\n\n    this.color = color;\n\n    this.stepDistance = 1;\n    this.angle = direction;\n    this.direction = angleToDirection({angle: direction, distance: this.stepDistance});\n\n    this.length = length;\n\n    if(autonomous) {\n      this.autonomous = true;\n      this.brain = {};\n      this.brain.thinkInterval = thinkInterval;\n      this.brain.thinkStep = 0;\n    }\n\n    this.segments = this.generateInitialSegments();\n  }\n\n  move() {\n    if(this.autonomous) {\n      this.think();\n    }\n    this.segments.forEach((segment) => {\n      segment.update();\n    });\n  }\n\n  updateDirection(angle) {\n    this.currentAngle = angle;\n    let newDirection = angleToDirection({angle: angle, distance: this.stepDistance});\n    this.rootSegment.changeDirection(newDirection);\n  }\n\n  think() {\n    if(this.brain.thinkStep > this.brain.thinkInterval) {\n      this.brain.thinkStep = 0;\n      let newDirection = parseInt((Math.random() * 720)-360);\n      this.updateDirection(newDirection+this.angle);\n    } else {\n      this.brain.thinkStep++;\n    }\n\n  }\n\n  radius() {\n    return 8+(this.length/20);\n  }\n\n  sprites() {\n    return this.segments.map((segment) => {\n      return segment.sprite;\n    }).reverse();\n  }\n\n\n  generateInitialSegments() {\n    let creature = this;\n    let initialAngle = 0;\n\n    let rootSegment = rootSegmentFactory({\n      startPosition: {x: this.currentPosition.x, y: this.currentPosition.y},\n      creature: creature\n    });\n    this.rootSegment = rootSegment;\n\n    console.log('root segment created');\n\n    let segments = [rootSegment];\n\n    for(let idx = 1; idx < this.length; idx++) {\n      let childSegment = childSegmentFactory({\n        creature: creature,\n        parent: segments[segments.length-1],\n        colorModifier: idx/this.length\n      });\n      childSegment.update();\n      console.log('updated child segment');\n      segments.push(childSegment);\n    }\n\n    console.log('initial segments generated');\n\n    return segments;\n  }\n\n\n}\n;function rootSegmentFactory({startPosition, creature}) {\n  let rootSegment = segmentFactory({startPosition: startPosition, creature: creature});\n\n  rootSegment.type = 'root';\n  rootSegment.child = null;\n  rootSegment.direction = {x: 0, y: 0};\n  rootSegment.update = function() { rootSegment.updatePosition(); };\n\n  return rootSegment;\n}\n;function segmentFactory({creature, startPosition}) {\n  let segment = {\n    creature: creature,\n    childPendingMoves: [],\n    position: startPosition\n  };\n\n  segment.pendChildDirectionChange = function(direction) {\n    if(segment.child) {\n      segment.childPendingMoves.push({\n        direction: direction,\n        distance: 0\n      });\n    }\n  };\n\n  segment.changeDirection = function(direction) {\n    segment.direction = direction;\n    segment.pendChildDirectionChange(direction);\n    // console.log('new direction is', this.direction);\n  };\n  segment.updatePosition = function() {\n    segment.position = moveDirection(segment.position, segment.direction);\n  };\n\n  segment.sprite = new Sprite({\n    type: 'circle',\n    parent: segment,\n    radius: segment.creature.radius(),\n    position: function() {\n      return segment.position;\n    },\n    color: {r: creature.color.r, g: creature.color.g, b: creature.color.b}\n  });\n\n  return segment;\n\n}\n;let engineService = () => {\n  let engine = {};\n\n  engine.initialize = ({canvas}) => {\n    engine.canvas = canvas;\n  };\n\n  engine.logCanvas = () => { console.log(engine.canvas); };\n\n  let renderService = () => {\n    let render = {};\n\n\n\n    let addSprite = (sprite, spriteMap) => {\n      if(!spriteMap.has(sprite.color)){\n        spriteMap.set(sprite.color, []);\n      }\n      spriteMap.get(sprite.color).push(sprite);\n    };\n\n    let addSprites = (sprites, spriteMap) => {\n      sprites.forEach((sprite)=>{\n        addSprite(sprite, spriteMap);\n      });\n    };\n\n\n\n    let entities = {\n      all: []\n    };\n\n    entities.sprites = () => {\n      let spritesMap = new Map();\n      entities.all.forEach((entity) => {\n        addSprites(entity.sprites(), spritesMap);\n      });\n      // console.log(spritesMap.values());\n      return spritesMap;\n    };\n\n    entities.update = () => {\n      entities.all.forEach((entity) => {\n        entity.move();\n      });\n    };\n\n    render.addEntity = (entity) => { entities.all.push(entity); };\n\n\n\n\n    render.update = () => {\n      entities.update();\n      let entitySpritesMap = entities.sprites();\n\n      let ctx = engine.canvas.getContext('2d');\n\n      ctx.clearRect(0, 0, engine.canvas.width, engine.canvas.height);\n\n      let drawColorGroup = (sprites, color) => {\n        sprites.reverse();\n        sprites.forEach( (sprite) => {\n          ctx.beginPath();\n          sprite.draw(ctx);\n          ctx.closePath();\n        });\n\n      };\n      entitySpritesMap.forEach(drawColorGroup);\n    };\n\n\n\n    return render;\n  };\n\n  engine.render = renderService();\n\n  return engine;\n};\n\ngame.engine = engineService();\n;class Sprite {\n  constructor({type, position, color={r: 255, g: 0, b: 0}, opacity=1, radius=40, parent}) {\n    this.type = type;\n    this.parent = parent;\n    this.position = position;\n    this.color = color;\n    this.opacity = opacity;\n    this.radius = radius;\n  }\n\n  rgbaValue(color, opacity) {\n    return `rgba(${color.r}, ${color.g}, ${color.b},  ${opacity})`;\n  }\n\n  drawCircle(ctx) {\n    ctx.fillStyle = this.rgbaValue(this.color, 1);\n    if(!this.position) {console.log(this);}\n    ctx.arc(this.position().x, this.position().y, this.radius, 0, 2*Math.PI);\n    ctx.fill();\n    ctx.lineWidth = 1;\n    let strokeColor = this.rgbaValue({\n      r: parseInt(this.color.r/3),\n      g: parseInt(this.color.g/3),\n      b: parseInt(this.color.b/3)\n    }, 1);\n    ctx.strokeStyle = strokeColor;\n    ctx.stroke();\n  }\n\n  draw(ctx) {\n    switch(this.type) {\n      case 'circle':\n        this.drawCircle(ctx);\n        break;\n      case 'circle-gradient':\n        this.drawCircleGradient(ctx);\n        break;\n    }\n  }\n}\n;var canvas = document.getElementById(\"slitherbots-canvas\");\n\nconsole.log(game);\n\ngame.engine.initialize({canvas: canvas});\ngame.engine.logCanvas();\n\nlet canvasCenter = () => {\n  return {x: canvas.width/2, y: canvas.height/2};\n};\n\nlet slitherbot = new Creature({\n  position: canvasCenter(),\n  length: 20,\n  direction: 1,\n  autonomous: true,\n  thinkInterval: 60\n});\n\nlet slitherbot2 = new Creature({\n  position: canvasCenter(),\n  length: 15,\n  direction: 1,\n  color: {r: 255, g:0, b:255}\n});\n\ngame.engine.render.addEntity(slitherbot);\ngame.engine.render.addEntity(slitherbot2);\n\n\nlet count = 0;\nlet direction = 1;\nlet variability = 100;\n\nlet update = () => {\n  if(count%10===0) {\n    let variation = parseInt(Math.random()*variability)-(variability/2);\n    direction+=(20 + variation);\n    slitherbot2.updateDirection(direction);\n   }\n  count++;\n  game.engine.render.update();\n};\n\nwindow.setInterval( () => {\n  window.requestAnimationFrame(update);\n}, 10);\n\n/*\nvar ctx = c.getContext(\"2d\");\nctx.fillStyle = \"#FF0000\";\nctx.fillRect(0,0,150,75);\n*/\n"]}